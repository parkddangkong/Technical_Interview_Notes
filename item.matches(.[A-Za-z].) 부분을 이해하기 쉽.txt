item.matches(".*[A-Za-z].*") 부분을 이해하기 쉽게 설명해드리겠습니다.

정규 표현식 (Regular Expression)
정규 표현식은 특정 패턴을 가진 문자열을 찾거나 조작하는 데 사용되는 강력한 도구입니다. 여기서 matches 메서드와 정규 표현식을 사용하여 문자열이 특정 패턴을 따르는지 확인합니다.

matches 메서드
matches 메서드는 문자열이 정규 표현식과 일치하는지 여부를 확인합니다. 일치하면 true를 반환하고, 그렇지 않으면 false를 반환합니다.

정규 표현식 패턴 설명
".*[A-Za-z].*"

1. .*:
.: 임의의 문자 하나를 의미합니다.
*: 앞의 문자가 0번 이상 반복됨을 의미합니다.
따라서 .*는 "아무 문자나 0번 이상"을 의미합니다.

2. [A-Za-z]:
[ ]: 대괄호 안의 문자 중 하나를 의미합니다.
A-Z: 대문자 알파벳 A부터 Z까지를 의미합니다.
a-z: 소문자 알파벳 a부터 z까지를 의미합니다.
따라서 [A-Za-z]는 "하나의 대문자 또는 소문자 알파벳"을 의미합니다.

3. .*:
다시 .*가 나옵니다. 앞서 설명한 것처럼, "아무 문자나 0번 이상"을 의미합니다.
전체 패턴 설명
.*[A-Za-z].*:
이 패턴은 "아무 문자나 0번 이상, 하나의 알파벳 대문자 또는 소문자, 그리고 다시 아무 문자나 0번 이상"을 의미합니다.
즉, 문자열 내에 하나 이상의 알파벳이 포함되어 있는지 검사하는 패턴입니다.

예제
몇 가지 예제로 이 패턴이 어떻게 작동하는지 살펴보겠습니다.

1. "Hello123":
.*: 처음에 H를 포함한 모든 문자
[A-Za-z]: H는 알파벳 대문자
.*: 나머지 문자 ello123
결과: 일치합니다.

2. "123456":
.*: 처음에 123456을 포함한 모든 문자
[A-Za-z]: 알파벳이 없음
결과: 일치하지 않습니다.

3. "!@#$%^":
.*: 처음에 !@#$%^를 포함한 모든 문자
[A-Za-z]: 알파벳이 없음
결과: 일치하지 않습니다.



+) containsAlphabet(item) : 알파벳 포함확인 메소드